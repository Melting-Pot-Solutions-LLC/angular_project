var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ViewContainerRef, Input, ReflectiveInjector, ComponentFactoryResolver, ViewChild } from '@angular/core';
import { AlertsService } from './alerts.service';
import { AlertComponent } from './alert.component';
var AlertsComponent = (function () {
    function AlertsComponent(_service, _resolver) {
        this._service = _service;
        this._resolver = _resolver;
        this.settings = {
            overlay: true,
            overlayClickToClose: true,
            showCloseButton: true,
            duration: 3000
        };
    }
    Object.defineProperty(AlertsComponent.prototype, "defaultSettings", {
        set: function (settings) {
            this.settings = Object.assign({}, this.settings, settings);
        },
        enumerable: true,
        configurable: true
    });
    AlertsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._listener = this._service.alert$.subscribe(function (alert) {
            if (_this._current) {
                if (alert.close)
                    setTimeout(function () { return _this._destroy(); }, 450);
                else
                    _this._destroy();
            }
            if (alert.close)
                return;
            var settingsFinalAsArray = [];
            for (var key in _this.settings) {
                var toUse = alert.override[key] !== undefined ? alert.override[key] : _this.settings[key];
                settingsFinalAsArray.push({ key: key, value: toUse });
            }
            var inputProviders = [
                { key: 'message', value: alert.message },
                { key: 'type', value: alert.type }
            ].concat(settingsFinalAsArray).map(function (input) {
                return { provide: input.key, useValue: input.value };
            }), resolvedInputs = ReflectiveInjector.resolve(inputProviders), injector = ReflectiveInjector.fromResolvedProviders(resolvedInputs, _this.compViewContainerRef.parentInjector), factory = _this._resolver.resolveComponentFactory(AlertComponent), component = factory.create(injector);
            _this.compViewContainerRef.insert(component.hostView);
            _this._current = component;
            _this._latestSub = component.instance.close.subscribe(function (res) {
                _this._service.alert$.next(res);
            });
        });
    };
    AlertsComponent.prototype._destroy = function () {
        /*
            We run the check twice in case the component timed out
            This can happen on short durations
         */
        if (this._current) {
            this._current.destroy();
            this._current = null;
        }
        this._latestSub.unsubscribe();
    };
    AlertsComponent.prototype.ngOnDestroy = function () {
        this._listener.unsubscribe();
    };
    return AlertsComponent;
}());
__decorate([
    ViewChild('comp', { read: ViewContainerRef }),
    __metadata("design:type", ViewContainerRef)
], AlertsComponent.prototype, "compViewContainerRef", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], AlertsComponent.prototype, "defaultSettings", null);
AlertsComponent = __decorate([
    Component({
        selector: 'jaspero-alerts',
        entryComponents: [AlertComponent],
        template: "<div #comp></div>"
    }),
    __metadata("design:paramtypes", [AlertsService,
        ComponentFactoryResolver])
], AlertsComponent);
export { AlertsComponent };
//# sourceMappingURL=alerts.component.js.map